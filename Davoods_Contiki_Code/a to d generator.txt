//READ VALUES AND SEND TO ADCSERVER


//include header


#include "contiki.h"
#include "net/rime.h"
#include "random.h"

#include "dev/button-sensor.h"

#include "dev/leds.h"

#include <stdio.h>
#include "/usr/msp430/include/msp430/adc12.h"
#include <msp430/adc12.h>

/*---------------------------------------------------------------------------*/
PROCESS(example_broadcast_process, "Broadcast example");
AUTOSTART_PROCESSES(&example_broadcast_process);
/*---------------------------------------------------------------------------*/
static void
broadcast_recv(struct broadcast_conn *c, const rimeaddr_t *from)
{

  printf("broadcast message received from %d.%d: '%s'\n",
         from->u8[0], from->u8[1], (char *)packetbuf_dataptr());
}
typedef struct{
unsigned int id;
signed long value;
}pkt;

static const struct broadcast_callbacks broadcast_call = {broadcast_recv};
static struct broadcast_conn broadcast;
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(example_broadcast_process, ev, data)
{
  static struct etimer et;

  PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

  PROCESS_BEGIN();

  broadcast_open(&broadcast, 129, &broadcast_call);

  while(1) {

    /* Delay 2-4 seconds */
    etimer_set(&et, CLOCK_SECOND * 4);

    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));

//read adc

signed long value=0;
ADC12CTL0 = SHT0_6 + SHT1_6 + REFON + ADC12ON;
ADC12CTL1 = SHP;
ADC12MCTL0 = INCH_1 + SREF_1; //need to set channel and ground
ADC12CTL0 |= ADC12SC + ENC;
while (ADC12CTL1 & 0x01); //wait for sample

value = ADC12MEM0;
//printf("Analouge test  %li\n",value);


pkt sendpack;
sendpack.id = 1;
sendpack.value = value;

    packetbuf_copyfrom(&sendpack,sizeof(pkt));
    broadcast_send(&broadcast);
   // printf("ADC value has been sent to server\n");
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/